{"ast":null,"code":"import _extends from \"@babel/runtime-corejs2/helpers/esm/extends\";\nvar _jsxFileName = \"/Users/me3n/WebstormProjects/with-mobx-state-tree/pages/_app.js\";\nvar __jsx = React.createElement;\nimport React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport { getSnapshot } from \"mobx-state-tree\";\nimport App from \"next/app\";\nimport { initializeStore } from \"../stores/store\";\nexport default class MyApp extends App {\n  static async getInitialProps({\n    Component,\n    ctx\n  }) {\n    //\n    // Use getInitialProps as a step in the lifecycle when\n    // we can initialize our store\n    //\n    const isServer = true;\n    const store = initializeStore(isServer); //\n    // Check whether the page being rendered by the App has a\n    // static getInitialProps method and if so call it\n    //\n\n    let pageProps = {};\n\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n\n    return {\n      initialState: getSnapshot(store),\n      isServer,\n      pageProps\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.store = initializeStore(props.isServer, props.initialState);\n  }\n\n  render() {\n    const {\n      Component,\n      pageProps\n    } = this.props;\n    return __jsx(Provider, {\n      store: this.store,\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 38\n      },\n      __self: this\n    }, __jsx(Component, _extends({}, pageProps, {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }), pageProps.children, \" \", __jsx(\"div\", {\n      __source: {\n        fileName: _jsxFileName,\n        lineNumber: 39\n      },\n      __self: this\n    }, \"asdsa\")));\n  }\n\n}","map":{"version":3,"sources":["/Users/me3n/WebstormProjects/with-mobx-state-tree/pages/_app.js"],"names":["React","Provider","getSnapshot","App","initializeStore","MyApp","getInitialProps","Component","ctx","isServer","store","pageProps","initialState","constructor","props","render","children"],"mappings":";;;AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,QAAT,QAAyB,YAAzB;AACA,SAASC,WAAT,QAA4B,iBAA5B;AACA,OAAOC,GAAP,MAAgB,UAAhB;AACA,SAASC,eAAT,QAAgC,iBAAhC;AAEA,eAAe,MAAMC,KAAN,SAAoBF,GAApB,CAAwB;AACrC,eAAaG,eAAb,CAA6B;AAAEC,IAAAA,SAAF;AAAaC,IAAAA;AAAb,GAA7B,EAAiD;AAC/C;AACA;AACA;AACA;AACA,UAAMC,QAAQ,OAAd;AACA,UAAMC,KAAK,GAAGN,eAAe,CAACK,QAAD,CAA7B,CAN+C,CAO/C;AACA;AACA;AACA;;AACA,QAAIE,SAAS,GAAG,EAAhB;;AACA,QAAIJ,SAAS,CAACD,eAAd,EAA+B;AAC7BK,MAAAA,SAAS,GAAG,MAAMJ,SAAS,CAACD,eAAV,CAA0BE,GAA1B,CAAlB;AACD;;AACD,WAAO;AACLI,MAAAA,YAAY,EAAEV,WAAW,CAACQ,KAAD,CADpB;AAELD,MAAAA,QAFK;AAGLE,MAAAA;AAHK,KAAP;AAKD;;AAEDE,EAAAA,WAAW,CAACC,KAAD,EAAQ;AACjB,UAAMA,KAAN;AACA,SAAKJ,KAAL,GAAaN,eAAe,CAACU,KAAK,CAACL,QAAP,EAAiBK,KAAK,CAACF,YAAvB,CAA5B;AACD;;AAEDG,EAAAA,MAAM,GAAG;AACP,UAAM;AAAER,MAAAA,SAAF;AAAaI,MAAAA;AAAb,QAA2B,KAAKG,KAAtC;AACA,WACE,MAAC,QAAD;AAAU,MAAA,KAAK,EAAE,KAAKJ,KAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,OACE,MAAC,SAAD,eAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,QAA2BA,SAAS,CAACK,QAArC,OAA+C;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,eAA/C,CADF,CADF;AAKD;;AAnCoC","sourcesContent":["import React from \"react\";\nimport { Provider } from \"mobx-react\";\nimport { getSnapshot } from \"mobx-state-tree\";\nimport App from \"next/app\";\nimport { initializeStore } from \"../stores/store\";\n\nexport default class MyApp extends App {\n  static async getInitialProps({ Component, ctx }) {\n    //\n    // Use getInitialProps as a step in the lifecycle when\n    // we can initialize our store\n    //\n    const isServer = typeof window === \"undefined\";\n    const store = initializeStore(isServer);\n    //\n    // Check whether the page being rendered by the App has a\n    // static getInitialProps method and if so call it\n    //\n    let pageProps = {};\n    if (Component.getInitialProps) {\n      pageProps = await Component.getInitialProps(ctx);\n    }\n    return {\n      initialState: getSnapshot(store),\n      isServer,\n      pageProps\n    };\n  }\n\n  constructor(props) {\n    super(props);\n    this.store = initializeStore(props.isServer, props.initialState);\n  }\n\n  render() {\n    const { Component, pageProps } = this.props;\n    return (\n      <Provider store={this.store}>\n        <Component {...pageProps}>{pageProps.children} <div>asdsa</div></Component>\n      </Provider>\n    );\n  }\n}\n"]},"metadata":{},"sourceType":"module"}