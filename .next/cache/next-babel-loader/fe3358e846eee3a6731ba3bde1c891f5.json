{"ast":null,"code":"import _Date$now from \"@babel/runtime-corejs2/core-js/date/now\";\nimport { types, applySnapshot } from 'mobx-state-tree';\nlet store = null;\nconst Store = types.model({\n  lastUpdate: types.Date,\n  light: false\n}).actions(self => {\n  let timer;\n\n  function start() {\n    timer = setInterval(() => {\n      // mobx-state-tree doesn't allow anonymous callbacks changing data\n      // pass off to another action instead\n      self.update();\n    }, 1000);\n  }\n\n  function update() {\n    self.lastUpdate = _Date$now();\n    self.light = true;\n  }\n\n  function stop() {\n    clearInterval(timer);\n  }\n\n  return {\n    start,\n    stop,\n    update\n  };\n});\nexport function initializeStore(isServer, snapshot = null) {\n  if (isServer) {\n    store = Store.create({\n      lastUpdate: _Date$now()\n    });\n  }\n\n  if (store === null) {\n    store = Store.create({\n      lastUpdate: _Date$now()\n    });\n  }\n\n  if (snapshot) {\n    applySnapshot(store, snapshot);\n  }\n\n  return store;\n}","map":{"version":3,"sources":["/Users/me3n/WebstormProjects/with-mobx-state-tree/stores/store.js"],"names":["types","applySnapshot","store","Store","model","lastUpdate","Date","light","actions","self","timer","start","setInterval","update","stop","clearInterval","initializeStore","isServer","snapshot","create"],"mappings":";AAAA,SAASA,KAAT,EAAgBC,aAAhB,QAAqC,iBAArC;AAEA,IAAIC,KAAK,GAAG,IAAZ;AAEA,MAAMC,KAAK,GAAGH,KAAK,CAChBI,KADW,CACL;AACLC,EAAAA,UAAU,EAAEL,KAAK,CAACM,IADb;AAELC,EAAAA,KAAK,EAAE;AAFF,CADK,EAKXC,OALW,CAKHC,IAAI,IAAI;AACf,MAAIC,KAAJ;;AACA,WAASC,KAAT,GAAkB;AAChBD,IAAAA,KAAK,GAAGE,WAAW,CAAC,MAAM;AACxB;AACA;AACAH,MAAAA,IAAI,CAACI,MAAL;AACD,KAJkB,EAIhB,IAJgB,CAAnB;AAKD;;AAED,WAASA,MAAT,GAAmB;AACjBJ,IAAAA,IAAI,CAACJ,UAAL,GAAkB,WAAlB;AACAI,IAAAA,IAAI,CAACF,KAAL,GAAa,IAAb;AACD;;AAED,WAASO,IAAT,GAAiB;AACfC,IAAAA,aAAa,CAACL,KAAD,CAAb;AACD;;AAED,SAAO;AAAEC,IAAAA,KAAF;AAASG,IAAAA,IAAT;AAAeD,IAAAA;AAAf,GAAP;AACD,CAzBW,CAAd;AA2BA,OAAO,SAASG,eAAT,CAA0BC,QAA1B,EAAoCC,QAAQ,GAAG,IAA/C,EAAqD;AAC1D,MAAID,QAAJ,EAAc;AACZf,IAAAA,KAAK,GAAGC,KAAK,CAACgB,MAAN,CAAa;AAAEd,MAAAA,UAAU,EAAE;AAAd,KAAb,CAAR;AACD;;AACD,MAAIH,KAAK,KAAK,IAAd,EAAoB;AAClBA,IAAAA,KAAK,GAAGC,KAAK,CAACgB,MAAN,CAAa;AAAEd,MAAAA,UAAU,EAAE;AAAd,KAAb,CAAR;AACD;;AACD,MAAIa,QAAJ,EAAc;AACZjB,IAAAA,aAAa,CAACC,KAAD,EAAQgB,QAAR,CAAb;AACD;;AACD,SAAOhB,KAAP;AACD","sourcesContent":["import { types, applySnapshot } from 'mobx-state-tree'\n\nlet store = null\n\nconst Store = types\n  .model({\n    lastUpdate: types.Date,\n    light: false\n  })\n  .actions(self => {\n    let timer\n    function start () {\n      timer = setInterval(() => {\n        // mobx-state-tree doesn't allow anonymous callbacks changing data\n        // pass off to another action instead\n        self.update()\n      }, 1000)\n    }\n\n    function update () {\n      self.lastUpdate = Date.now()\n      self.light = true\n    }\n\n    function stop () {\n      clearInterval(timer)\n    }\n\n    return { start, stop, update }\n  })\n\nexport function initializeStore (isServer, snapshot = null) {\n  if (isServer) {\n    store = Store.create({ lastUpdate: Date.now() })\n  }\n  if (store === null) {\n    store = Store.create({ lastUpdate: Date.now() })\n  }\n  if (snapshot) {\n    applySnapshot(store, snapshot)\n  }\n  return store\n}\n"]},"metadata":{},"sourceType":"module"}